import re

from jinja2 import contextfunction, Environment
from jinja2 import contextfilter, environmentfilter, Markup, Undefined, nodes

#logger = getLoggerWithNullHandler('hyde.engine.Jinja2')

from sha import sha

def sha_hash(str):
    "get sha1 digest of string"
    return sha(str).hexdigest()

@environmentfilter
def latex_to_img(env, value, prefix = "media/images/tex/"):
    """
    Replaces latex code w. reference to PNG image generated by latex hyde plugin.
    used during generation of RSS feeds
    """
    output = value

    inlineregex = re.compile(r'(?<!\$)(?:\$)(?!\$)(.+?)(?<!\$)(?:\$)(?!\$)')
    displayregex = re.compile(r'(?:\$\$)(.+?)(?:\$\$)',re.DOTALL)

    def pngref(m):
        sha1 = sha_hash(m.group(1).lstrip().rstrip())
        return '<img src="'+prefix+sha1+'.png">'

    output = inlineregex.sub(pngref,output)
    output = displayregex.sub(pngref,output)

    return output

@environmentfilter
def marginalia_to_footnotes(env, value):
    """
    Replaces latex code w. reference to PNG image generated by latex hyde plugin.
    used during generation of RSS feeds
    """
    output = value

    count = [0] #omg lexical scoping hack
    note_store = []
    marginregex = re.compile(r'\.\.\.\((.+?)\)\.\.\.',re.DOTALL)

    def transnote(m):
        note_store.append(m.group(1).lstrip().rstrip())
        retstr = '[^fnote'+str(count[0])+']'
        count[0]+=1 #omg lexical scoping hack
        return retstr

    output = marginregex.sub(transnote,output)

    output +='\n\n'

    for i,note in enumerate(note_store):
        lines=note.split('\n')
        output+='[^fnote'+str(i)+']: '+lines[0]+'\n'
        for l in lines[1:]:
            output+="    "+l+'\n'

    return output

